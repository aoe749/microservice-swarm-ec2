version: '3.3'
networks:
  swarm_net:
    external: true
services:
  # Deploy the consul server instances
  server:
    image: consul:latest
    networks:
      swarm_net:
        aliases:
          - consul.server
    # Start the consul server with the given configuration
    command: "consul agent -config-file /consul/config/config.json"
    # Expose port 8500 so we can access the UI and allow connections across datacenters.
    ports:
      - target: 8500
        published: 8500
        mode: host
    # Mount the configuration and data volumes to the container.
    volumes:
      - /home/ec2-user/consul/config:/consul/config
      - /home/ec2-user/consul/data:/consul/data
    # Deploy the consul server on all servers which are managers.
    # Use DNS Round Robin instead VIP for discovery. This ensures we get all running
    # consul server instances when querying consul.server
    deploy:
      mode: global
      endpoint_mode: vip
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 30s
      restart_policy:
        condition: any
        delay: 5s
        window: 120s
      placement:
        constraints:
          - node.role == manager
  # Deploy the consul agent instances
  agent:
    image: consul:latest
    networks:
      swarm_net:
        aliases:
          - consul.server
     # Start the consul agent with the given configuration
    command: "consul agent -config-file /consul/config/config.json"
    # Mount the configuration and data volumes to the container.
    volumes:
      - /home/ec2-user/consul/config:/consul/config
      - /home/ec2-user/consul/data:/consul/data
    # Deploy the consul agent on all servers which are workers.
    # Use DNS Round Robin instead VIP for discovery.
    deploy:
      mode: global
      endpoint_mode: vip
      update_config:
        parallelism: 1
        failure_action: rollback
        delay: 30s
      restart_policy:
        condition: any
        delay: 5s
        window: 120s
      placement:
        constraints:
          - node.role == worker

  # -----------------------------
  # Infrastructure Visualization
  # -----------------------------
    image: dockersamples/visualizer
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 4040:8080
    networks:
      swarm_net:
# ---------------------------
# Service One Database
# ---------------------------
service-one-db:
  container_name: "service-one-db"
  hostname: "serviceonedb"
  image: "mongo:3.7"
  environment:
    - MONGODB_USER="service-one"
    - MONGODB_PASS="service-one"
    - MONGO_DATA_DIR=/data/db
    - MONGO_LOG_DIR=/dev/null
  volumes:
    - mongodata:/data/db
  ports:
    - "27017:27017"
  command: mongod --smallfiles
  #--logpath=/dev/null --sslDisabledProtocols 'none'
  networks:
    swarm_net:

---------------------------
# Service Two Database
# ---------------------------
service-two-db:
  container_name: "service-two-db"
  hostname: "servicetwodb"
  image: "mysql/mysql-server:5.7"
  environment:
    - MYSQL_ROOT_PASSWORD=root123
    - MYSQL_DATABASE=service-two
    - MYSQL_USER=service-two
    - MYSQL_PASSWORD=service-two
  ports:
    - "3310:3306"
  expose:
    - "3310"
  networks:
    swarm_net:

rabbit:
  image: rabbitmq:3.9-management
  hostname: rabbitmq
  ports:
    - "5672:5672"
    - "15672:15672"
  environment:
    - CLUSTERED=true
    - RAM_NODE=true
    - CLUSTER_WITH=rabbit
    - RABBITMQ_DEFAULT_USER=mudigal
    - RABBITMQ_DEFAULT_PASS=mudigal
  networks:
    swarm_net
